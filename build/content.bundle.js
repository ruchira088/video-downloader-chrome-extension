/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/monet/dist/monet.js":
/*!******************************************!*\
  !*** ./node_modules/monet/dist/monet.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Monet.js 0.9.0-rc.1\n *\n * (c) 2012-2018 Chris Myers\n * @license Monet.js may be freely distributed under the MIT license.\n * For all details and documentation:\n * https://monet.github.io/monet.js/\n */\n(function(root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(typeof self !== \"undefined\" ? self : this, function() {\n    \"use strict\";\n    function assignImp(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key) && source[key] !== undefined) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n    var assign = isFunction(Object.assign) ? Object.assign : assignImp;\n    var Monet = {\n        apply2: apply2,\n        assign: assign,\n        compose: compose,\n        curry: curry(swap(curry), [])([]),\n        idFunction: idFunction,\n        isFunction: isFunction,\n        noop: noop,\n        swap: swap\n    };\n    var TYPE_KEY = \"@@type\";\n    var LIB_NAME = \"monet.js\";\n    var TYPES_NAMES = {\n        Identity: \"Identity\",\n        Maybe: \"Maybe\",\n        Either: \"Either\",\n        Validation: \"Validation\",\n        List: \"List\",\n        NEL: \"NEL\",\n        IO: \"IO\",\n        MonadT: \"MonadT\",\n        Reader: \"Reader\",\n        Free: \"Free\"\n    };\n    function setType(target, typeName) {\n        target[TYPE_KEY] = LIB_NAME + \"/\" + typeName;\n    }\n    function isInstance(typeName) {\n        return function(target) {\n            return (target[TYPE_KEY] || target.constructor[TYPE_KEY]) === LIB_NAME + \"/\" + typeName;\n        };\n    }\n    function isOfType(typeName) {\n        return function(target) {\n            var targetType = target[TYPE_KEY] || target.constructor && target.constructor[TYPE_KEY];\n            return Boolean(targetType) && targetType.length >= typeName.length && targetType.indexOf(typeName) === targetType.length - typeName.length;\n        };\n    }\n    function isNothing(value) {\n        return value == null;\n    }\n    function isEmpty(value) {\n        if (isNothing(value) || value === \"\") {\n            return true;\n        }\n        if (Array.isArray(value) && value.length === 0) {\n            return true;\n        }\n        if (typeof value === \"object\") {\n            return Object.keys(value).length === 0;\n        }\n        return false;\n    }\n    function noop() {}\n    function getArgs(args) {\n        return Array.prototype.slice.call(args);\n    }\n    function curry(fn, args) {\n        return function() {\n            var args1 = args.concat(getArgs(arguments));\n            return args1.length >= fn.length ? fn.apply(null, args1.slice(0, args1.length)) : curry(fn, args1);\n        };\n    }\n    function compose(f, g) {\n        return function(x) {\n            return f(g(x));\n        };\n    }\n    function isFunction(f) {\n        return Boolean(f && f.constructor && f.call && f.apply);\n    }\n    function idFunction(value) {\n        return value;\n    }\n    function trueFunction() {\n        return true;\n    }\n    function areEqual(a, b) {\n        if (a === b || a !== a && b !== b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        if (isFunction(a.equals) && isFunction(b.equals)) {\n            return a.equals(b);\n        }\n        return false;\n    }\n    function equals(a) {\n        return function(b) {\n            return areEqual(a, b);\n        };\n    }\n    function falseFunction() {\n        return false;\n    }\n    function swap(f) {\n        return function(a, b) {\n            return f(b, a);\n        };\n    }\n    function apply2(a1, a2, f) {\n        return a2.ap(a1.map(curry(f, [])));\n    }\n    function listEquals(list1, list2) {\n        var a = list1;\n        var b = list2;\n        while (!a.isNil && !b.isNil) {\n            if (!equals(a.head())(b.head())) {\n                return false;\n            }\n            a = a.tail();\n            b = b.tail();\n        }\n        return a.isNil && b.isNil;\n    }\n    function listMapC(fn, l) {\n        return l.isNil ? Return(l) : Suspend(function() {\n            return listMapC(fn, l.tail());\n        }).map(curry(cons, [])(fn(l.head())));\n    }\n    function listMap(fn, l) {\n        return listMapC(fn, l).run();\n    }\n    function listFilter(list, fn) {\n        return list.foldRight(Nil)(function(a, acc) {\n            return fn(a) ? cons(a, acc) : acc;\n        });\n    }\n    function listFindC(l, fn) {\n        if (l.isNil) {\n            return Return(None());\n        }\n        var h = l.head();\n        return fn(h) ? Return(Some(h)) : Suspend(function() {\n            return listFindC(l.tail(), fn);\n        });\n    }\n    function listFind(l, fn) {\n        return listFindC(l, fn).run();\n    }\n    function listContainsC(l, val) {\n        if (l.isNil) {\n            return Return(false);\n        }\n        var h = l.head();\n        return areEqual(h, val) ? Return(true) : Suspend(function() {\n            return listContainsC(l.tail(), val);\n        });\n    }\n    function listContains(l, val) {\n        return listContainsC(l, val).run();\n    }\n    function cons(head, tail) {\n        return tail.cons(head);\n    }\n    function List() {\n        switch (arguments.length) {\n          case 0:\n            return new List.fn.init();\n\n          case 1:\n            return new List.fn.init(arguments[0]);\n\n          default:\n            return new List.fn.init(arguments[0], arguments[1]);\n        }\n    }\n    Monet.List = List;\n    var listForEach = function(effectFn, l) {\n        if (!l.isNil) {\n            effectFn(l.head());\n            listForEach(effectFn, l.tail());\n        }\n    };\n    var foldLeft = function(fn, acc, list) {\n        function fL(innerAcc, innerList) {\n            return innerList.isNil ? Return(innerAcc) : Suspend(function() {\n                return fL(fn(innerAcc, innerList.head()), innerList.tail());\n            });\n        }\n        return fL(acc, list).run();\n    };\n    var foldRight = function(fn, list, acc) {\n        function fR(innerList, innerAcc) {\n            return innerList.isNil ? Return(innerAcc) : Suspend(function() {\n                return fR(innerList.tail(), innerAcc);\n            }).map(function(accumulated) {\n                return fn(innerList.head(), accumulated);\n            });\n        }\n        return fR(list, acc).run();\n    };\n    var append = function(self, other) {\n        function appendFree(listA, listB) {\n            return listA.isNil ? Return(listB) : Suspend(function() {\n                return appendFree(listA.tail(), listB).map(function(list) {\n                    return list.cons(listA.head());\n                });\n            });\n        }\n        return appendFree(self, other).run();\n    };\n    var sequence = function(list, type) {\n        return list.foldRight(type.of(Nil))(type.map2(cons));\n    };\n    var sequenceValidation = function(list) {\n        return list.foldLeft(Success(Nil))(function(acc, a) {\n            return acc.ap(a.map(function(v) {\n                return function(t) {\n                    return cons(v, t);\n                };\n            }));\n        }).map(listReverse);\n    };\n    var listReverse = function(list) {\n        return list.foldLeft(Nil)(swap(cons));\n    };\n    var listAp = function(list1, list2) {\n        return list1.bind(function(x) {\n            return list2.map(function(f) {\n                return f(x);\n            });\n        });\n    };\n    var Nil;\n    List.fn = List.prototype = {\n        init: function() {\n            var head = arguments[0];\n            var tail = arguments[1];\n            if (arguments.length === 0) {\n                this.isNil = true;\n                this.size_ = 0;\n            } else {\n                this.isNil = false;\n                this.head_ = head;\n                this.tail_ = tail || Nil;\n                this.size_ = this.tail_.size() + 1;\n            }\n            setType(this, TYPES_NAMES.List);\n        },\n        of: function(value) {\n            return new List(value);\n        },\n        size: function() {\n            return this.size_;\n        },\n        equals: function(other) {\n            return (List.isOfType(other) || NEL.isOfType(other)) && listEquals(this, other);\n        },\n        cons: function(head) {\n            return List(head, this);\n        },\n        snoc: function(element) {\n            return this.concat(List(element));\n        },\n        map: function(fn) {\n            return listMap(fn, this);\n        },\n        toArray: function() {\n            return foldLeft(function(acc, e) {\n                acc.push(e);\n                return acc;\n            }, [], this);\n        },\n        toSet: function() {\n            return new Set(this);\n        },\n        foldLeft: function(initialValue) {\n            var self = this;\n            return function(fn) {\n                return foldLeft(fn, initialValue, self);\n            };\n        },\n        foldRight: function(initialValue) {\n            var self = this;\n            return function(fn) {\n                return foldRight(fn, self, initialValue);\n            };\n        },\n        append: function(list2) {\n            return append(this, list2);\n        },\n        filter: function(fn) {\n            return listFilter(this, fn);\n        },\n        find: function(fn) {\n            return listFind(this, fn);\n        },\n        flatten: function() {\n            return foldRight(append, this, Nil);\n        },\n        flattenMaybe: function() {\n            return this.flatMap(Maybe.toList);\n        },\n        reverse: function() {\n            return listReverse(this);\n        },\n        bind: function(fn) {\n            return this.map(fn).flatten();\n        },\n        forEach: function(effectFn) {\n            listForEach(effectFn, this);\n        },\n        contains: function(val) {\n            return listContains(this, val);\n        },\n        sequenceMaybe: function() {\n            return sequence(this, Maybe);\n        },\n        sequenceValidation: function() {\n            return sequenceValidation(this);\n        },\n        sequenceEither: function() {\n            return sequence(this, Either);\n        },\n        sequenceIO: function() {\n            return sequence(this, IO);\n        },\n        sequenceReader: function() {\n            return sequence(this, Reader);\n        },\n        sequence: function(monadType) {\n            return sequence(this, monadType);\n        },\n        head: function() {\n            return this.head_;\n        },\n        headMaybe: function() {\n            return this.isNil ? None() : Some(this.head_);\n        },\n        tail: function() {\n            return this.isNil ? Nil : this.tail_;\n        },\n        tails: function() {\n            return this.isNil ? List(Nil, Nil) : this.tail().tails().cons(this);\n        },\n        ap: function(list) {\n            return listAp(this, list);\n        },\n        isNEL: falseFunction,\n        toString: function() {\n            return this.isNil ? \"Nil\" : \"List(\" + this.toArray().join(\", \") + \")\";\n        },\n        inspect: function() {\n            return this.toString();\n        }\n    };\n    List.fn.init.prototype = List.fn;\n    setType(List, TYPES_NAMES.List);\n    setType(List.fn.init, TYPES_NAMES.List);\n    List.isInstance = isInstance(TYPES_NAMES.List);\n    List.isOfType = isOfType(TYPES_NAMES.List);\n    List.prototype.empty = function() {\n        return Nil;\n    };\n    List.fromArray = function(array) {\n        return array.reduceRight(function(acc, next) {\n            return acc.cons(next);\n        }, Nil);\n    };\n    List.from = function(iterable) {\n        return List.fromArray(Array.from(iterable));\n    };\n    List.of = function(a) {\n        return new List(a, Nil);\n    };\n    List.prototype.each = List.prototype.forEach;\n    Nil = Monet.Nil = new List.fn.init();\n    function emptyNELError(head) {\n        return new Error(\"Cannot create an empty Non-Empty List. Passed head is \" + head + \".\");\n    }\n    function NEL(head, tail) {\n        if (isNothing(head)) {\n            throw emptyNELError(head);\n        }\n        return new NEL.fn.init(head, tail);\n    }\n    Monet.NEL = Monet.NonEmptyList = NEL;\n    NEL.of = function(a) {\n        return NEL(a, Nil);\n    };\n    NEL.fn = NEL.prototype = {\n        init: function(head, tail) {\n            if (isNothing(head)) {\n                throw emptyNELError(head);\n            } else {\n                this.isNil = false;\n                this.head_ = head;\n                this.tail_ = isNothing(tail) ? Nil : tail;\n                this.size_ = this.tail_.size() + 1;\n            }\n            setType(this, TYPES_NAMES.NEL);\n        },\n        equals: function(other) {\n            return List.isOfType(other) || NEL.isOfType(other) && listEquals(this, other);\n        },\n        cons: function(head) {\n            return NEL(head, this.toList());\n        },\n        snoc: function(element) {\n            return this.concat(NEL(element));\n        },\n        map: function(fn) {\n            return NEL(fn(this.head_), listMap(fn, this.tail_));\n        },\n        bind: function(fn) {\n            var p = fn(this.head_);\n            if (!p.isNEL()) {\n                throw new Error(\"NEL.fn.bind: Passed function must return a NonEmptyList.\");\n            }\n            var list = this.tail().foldLeft(Nil.snoc(p.head()).append(p.tail()))(function(acc, e) {\n                var list2 = fn(e).toList();\n                return acc.snoc(list2.head()).append(list2.tail());\n            });\n            return new NEL(list.head(), list.tail());\n        },\n        head: function() {\n            return this.head_;\n        },\n        tail: function() {\n            return this.tail_;\n        },\n        tails: function() {\n            var listsOfNels = this.toList().tails().map(NEL.fromList).flattenMaybe();\n            return NEL(listsOfNels.head(), listsOfNels.tail());\n        },\n        toList: function() {\n            return List(this.head_, this.tail_);\n        },\n        reverse: function() {\n            if (this.tail().isNil) {\n                return this;\n            }\n            var reversedTail = this.tail().reverse();\n            return NEL(reversedTail.head(), reversedTail.tail().append(List(this.head())));\n        },\n        foldLeft: function(initialValue) {\n            return this.toList().foldLeft(initialValue);\n        },\n        foldRight: function(initialValue) {\n            return this.toList().foldRight(initialValue);\n        },\n        reduceLeft: function(fn) {\n            return this.tail().foldLeft(this.head())(fn);\n        },\n        filter: function(fn) {\n            return listFilter(this.toList(), fn);\n        },\n        find: function(fn) {\n            return listFind(this.toList(), fn);\n        },\n        flatten: function() {\n            return foldRight(append, this.toList().map(function(l) {\n                return l.isNEL() ? l.toList() : l;\n            }), Nil);\n        },\n        flattenMaybe: function() {\n            return this.toList().flatMap(Maybe.toList);\n        },\n        contains: function(val) {\n            return listContains(this.toList(), val);\n        },\n        append: function(list2) {\n            return NEL.fromList(this.toList().append(list2.toList())).some();\n        },\n        cobind: function(fn) {\n            return this.cojoin().map(fn);\n        },\n        size: function() {\n            return this.size_;\n        },\n        forEach: function(fn) {\n            return this.toList().forEach(fn);\n        },\n        isNEL: trueFunction,\n        toString: function() {\n            return \"NEL(\" + this.toArray().join(\", \") + \")\";\n        },\n        inspect: function() {\n            return this.toString();\n        }\n    };\n    NEL.fromList = function(list) {\n        return list.isNil ? None() : Some(NEL(list.head(), list.tail()));\n    };\n    NEL.fromArray = function(array) {\n        return NEL.fromList(List.fromArray(array));\n    };\n    NEL.from = function(iterable) {\n        return NEL.fromList(List.from(iterable));\n    };\n    NEL.fn.init.prototype = NEL.fn;\n    setType(NEL, TYPES_NAMES.NEL);\n    setType(NEL.fn.init, TYPES_NAMES.NEL);\n    NEL.isInstance = isInstance(TYPES_NAMES.NEL);\n    NEL.isOfType = isOfType(TYPES_NAMES.NEL);\n    NEL.prototype.toArray = List.prototype.toArray;\n    NEL.prototype.toSet = List.prototype.toSet;\n    NEL.prototype.extract = NEL.prototype.copure = NEL.prototype.head;\n    NEL.prototype.cojoin = NEL.prototype.tails;\n    NEL.prototype.coflatMap = NEL.prototype.mapTails = NEL.prototype.cobind;\n    NEL.prototype.ap = List.prototype.ap;\n    var Maybe = Monet.Maybe = {};\n    Maybe.fromFalsy = function(val) {\n        return !val ? Maybe.None() : Maybe.Some(val);\n    };\n    Maybe.fromNull = function(val) {\n        return isNothing(val) ? Maybe.None() : Maybe.Some(val);\n    };\n    Maybe.fromUndefined = function(val) {\n        return val === undefined ? Maybe.None() : Maybe.Some(val);\n    };\n    Maybe.fromEmpty = function(val) {\n        return isEmpty(val) ? Maybe.None() : Maybe.Some(val);\n    };\n    Maybe.of = function(a) {\n        return Some(a);\n    };\n    var Some = Maybe.Just = Maybe.Some = Maybe.some = Monet.Some = Monet.Just = function(val) {\n        return new Maybe.fn.init(true, val);\n    };\n    var None = Maybe.Nothing = Maybe.None = Maybe.none = Monet.None = Monet.Nothing = function() {\n        return new Maybe.fn.init(false, null);\n    };\n    Maybe.toList = function(maybe) {\n        return maybe.toList();\n    };\n    Maybe.fn = Maybe.prototype = {\n        init: function(isValue, val) {\n            this.isValue = isValue;\n            if (isValue && isNothing(val)) {\n                throw new Error(\"Can not create Some with illegal value: \" + val + \".\");\n            }\n            this.val = val;\n            setType(this, TYPES_NAMES.Maybe);\n        },\n        isSome: function() {\n            return this.isValue;\n        },\n        isNone: function() {\n            return !this.isSome();\n        },\n        bind: function(bindFn) {\n            return this.isValue ? bindFn(this.val) : this;\n        },\n        some: function() {\n            if (this.isValue) {\n                return this.val;\n            }\n            throw new Error(\"Cannot call .some() on a None.\");\n        },\n        orSome: function(otherValue) {\n            return this.isValue ? this.val : otherValue;\n        },\n        orLazy: function(getOtherValue) {\n            return this.cata(getOtherValue, idFunction);\n        },\n        orNull: function() {\n            return this.orSome(null);\n        },\n        orUndefined: function() {\n            return this.orSome(undefined);\n        },\n        orElse: function(maybe) {\n            return this.catchMap(function() {\n                return maybe;\n            });\n        },\n        ap: function(maybeWithFunction) {\n            var value = this.val;\n            return this.isValue ? maybeWithFunction.map(function(fn) {\n                return fn(value);\n            }) : this;\n        },\n        equals: function(other) {\n            return Maybe.isOfType(other) && this.cata(function() {\n                return other.isNone();\n            }, function(val) {\n                return other.fold(false)(equals(val));\n            });\n        },\n        toArray: function() {\n            return this.map(function(val) {\n                return [ val ];\n            }).orLazy(function() {\n                return [];\n            });\n        },\n        toSet: function() {\n            return new Set(this);\n        },\n        toList: function() {\n            return this.map(List).orLazy(function() {\n                return Nil;\n            });\n        },\n        toEither: function(failVal) {\n            return this.isSome() ? Right(this.val) : Left(failVal);\n        },\n        toValidation: function(failVal) {\n            return this.isSome() ? Success(this.val) : Fail(failVal);\n        },\n        fold: function(defaultValue) {\n            var self = this;\n            return function(fn) {\n                return self.isSome() ? fn(self.val) : defaultValue;\n            };\n        },\n        foldLeft: function(initialValue) {\n            return this.toList().foldLeft(initialValue);\n        },\n        foldRight: function(initialValue) {\n            return this.toList().foldRight(initialValue);\n        },\n        cata: function(none, some) {\n            return this.isSome() ? some(this.val) : none();\n        },\n        catchMap: function(fn) {\n            return this.isSome() ? this : fn();\n        },\n        filter: function(fn) {\n            var self = this;\n            return self.flatMap(function(a) {\n                return fn(a) ? self : None();\n            });\n        },\n        orNoneIf: function(bool) {\n            return bool ? None() : this;\n        },\n        contains: function(val) {\n            return this.isSome() ? areEqual(this.val, val) : false;\n        },\n        forEach: function(fn) {\n            this.cata(noop, fn);\n        },\n        orElseRun: function(fn) {\n            this.cata(fn, noop);\n        },\n        toString: function() {\n            return this.isSome() ? \"Just(\" + this.val + \")\" : \"Nothing\";\n        },\n        inspect: function() {\n            return this.toString();\n        }\n    };\n    Maybe.prototype.orJust = Maybe.prototype.getOrElse = Maybe.prototype.orSome;\n    Maybe.prototype.just = Maybe.prototype.some;\n    Maybe.prototype.isJust = Maybe.prototype.isSome;\n    Maybe.prototype.isNothing = Maybe.prototype.isNone;\n    Maybe.prototype.orNothingIf = Maybe.prototype.orNoneIf;\n    Maybe.fn.init.prototype = Maybe.fn;\n    setType(Maybe, TYPES_NAMES.Maybe);\n    setType(Maybe.fn.init, TYPES_NAMES.Maybe);\n    Maybe.isInstance = isInstance(TYPES_NAMES.Maybe);\n    Maybe.isOfType = isOfType(TYPES_NAMES.Maybe);\n    var Validation = Monet.Validation = {};\n    var Success = Validation.Success = Validation.success = Monet.Success = function(val) {\n        return new Validation.fn.init(val, true);\n    };\n    var Fail = Validation.Fail = Validation.fail = Monet.Fail = function(error) {\n        return new Validation.fn.init(error, false);\n    };\n    Validation.of = function(v) {\n        return Success(v);\n    };\n    Validation.fn = Validation.prototype = {\n        init: function(val, success) {\n            this.val = val;\n            this.isSuccessValue = success;\n            setType(this, TYPES_NAMES.Validation);\n        },\n        success: function() {\n            if (this.isSuccess()) {\n                return this.val;\n            }\n            throw new Error(\"Cannot call success() on a Fail.\");\n        },\n        isSuccess: function() {\n            return this.isSuccessValue;\n        },\n        isFail: function() {\n            return !this.isSuccessValue;\n        },\n        fail: function() {\n            if (this.isSuccess()) {\n                throw new Error(\"Cannot call fail() on a Success.\");\n            }\n            return this.val;\n        },\n        bind: function(fn) {\n            return this.isSuccess() ? fn(this.val) : this;\n        },\n        ap: function(validationWithFn) {\n            var value = this.val;\n            return this.isSuccess() ? validationWithFn.map(function(fn) {\n                return fn(value);\n            }) : validationWithFn.isFail() ? Validation.Fail(Semigroup.append(value, validationWithFn.fail())) : this;\n        },\n        acc: function() {\n            var x = function() {\n                return x;\n            };\n            return this.isSuccessValue ? Validation.success(x) : this;\n        },\n        foldLeft: function(initialValue) {\n            return this.toMaybe().toList().foldLeft(initialValue);\n        },\n        foldRight: function(initialValue) {\n            return this.toMaybe().toList().foldRight(initialValue);\n        },\n        cata: function(fail, success) {\n            return this.isSuccessValue ? success(this.val) : fail(this.val);\n        },\n        catchMap: function(fn) {\n            return this.isSuccess() ? this : fn(this.val);\n        },\n        swap: function() {\n            return this.isSuccess() ? Fail(this.val) : Success(this.val);\n        },\n        failMap: function(fn) {\n            return this.isFail() ? Fail(fn(this.val)) : this;\n        },\n        bimap: function(fail, success) {\n            return this.isSuccessValue ? this.map(success) : this.failMap(fail);\n        },\n        forEach: function(fn) {\n            this.cata(noop, fn);\n        },\n        forEachFail: function(fn) {\n            this.cata(fn, noop);\n        },\n        equals: function(other) {\n            return Validation.isOfType(other) && this.cata(function(fail) {\n                return other.cata(equals(fail), falseFunction);\n            }, function(success) {\n                return other.cata(falseFunction, equals(success));\n            });\n        },\n        toMaybe: function() {\n            return this.isSuccess() ? Some(this.val) : None();\n        },\n        toEither: function() {\n            return (this.isSuccess() ? Right : Left)(this.val);\n        },\n        toString: function() {\n            return (this.isSuccess() ? \"Success(\" : \"Fail(\") + this.val + \")\";\n        },\n        inspect: function() {\n            return this.toString();\n        }\n    };\n    Validation.prototype.fold = Validation.prototype.cata;\n    Validation.fn.init.prototype = Validation.fn;\n    setType(Validation, TYPES_NAMES.Validation);\n    setType(Validation.fn.init, TYPES_NAMES.Validation);\n    Validation.isInstance = isInstance(TYPES_NAMES.Validation);\n    Validation.isOfType = isOfType(TYPES_NAMES.Validation);\n    var Semigroup = Monet.Semigroup = {\n        append: function(a, b) {\n            if (isFunction(a.concat)) {\n                return a.concat(b);\n            }\n            throw new Error(\"Couldn't find a semigroup appender in the environment, \" + \"please specify your own append function\");\n        }\n    };\n    var MonadT = Monet.monadTransformer = Monet.MonadT = Monet.monadT = function(monad) {\n        return new MonadT.fn.init(monad);\n    };\n    MonadT.of = function(m) {\n        return MonadT(m);\n    };\n    MonadT.fn = MonadT.prototype = {\n        init: function(monad) {\n            this.monad = monad;\n            setType(Validation, TYPES_NAMES.MonadT);\n        },\n        map: function(fn) {\n            return MonadT(this.monad.map(function(v) {\n                return v.map(fn);\n            }));\n        },\n        bind: function(fn) {\n            return MonadT(this.monad.map(function(v) {\n                return v.flatMap(fn);\n            }));\n        },\n        ap: function(monadWithFn) {\n            return MonadT(this.monad.flatMap(function(v) {\n                return monadWithFn.perform().map(function(v2) {\n                    return v.ap(v2);\n                });\n            }));\n        },\n        perform: function() {\n            return this.monad;\n        }\n    };\n    MonadT.fn.init.prototype = MonadT.fn;\n    var IO = Monet.IO = Monet.io = function(effectFn) {\n        return new IO.fn.init(effectFn);\n    };\n    IO.of = function(a) {\n        return IO(function() {\n            return a;\n        });\n    };\n    IO.fn = IO.prototype = {\n        init: function(effectFn) {\n            if (!isFunction(effectFn)) {\n                throw new Error(\"IO requires a function.\");\n            }\n            this.effectFn = effectFn;\n            setType(this, TYPES_NAMES.IO);\n        },\n        map: function(fn) {\n            var self = this;\n            return IO(function() {\n                return fn(self.effectFn());\n            });\n        },\n        bind: function(fn) {\n            var self = this;\n            return IO(function() {\n                return fn(self.effectFn()).run();\n            });\n        },\n        ap: function(ioWithFn) {\n            var self = this;\n            return ioWithFn.map(function(fn) {\n                return fn(self.effectFn());\n            });\n        },\n        run: function() {\n            return this.effectFn();\n        }\n    };\n    IO.fn.init.prototype = IO.fn;\n    setType(IO, TYPES_NAMES.IO);\n    setType(IO.fn.init, TYPES_NAMES.IO);\n    IO.isInstance = isInstance(TYPES_NAMES.IO);\n    IO.isOfType = isOfType(TYPES_NAMES.IO);\n    IO.prototype.perform = IO.prototype.performUnsafeIO = IO.prototype.run;\n    var Either = Monet.Either = {};\n    Either.of = function(a) {\n        return Right(a);\n    };\n    Either.fromTry = function(fn) {\n        try {\n            return Either.right(fn());\n        } catch (e) {\n            return Either.left(e);\n        }\n    };\n    Either.fromPromise = function(promise) {\n        return promise.then(Either.Right, Either.Left);\n    };\n    var Right = Either.Right = Either.right = Monet.Right = function(val) {\n        return new Either.fn.init(val, true);\n    };\n    var Left = Either.Left = Either.left = Monet.Left = function(val) {\n        return new Either.fn.init(val, false);\n    };\n    Either.fn = Either.prototype = {\n        init: function(val, isRightValue) {\n            this.isRightValue = isRightValue;\n            this.value = val;\n            setType(this, TYPES_NAMES.Either);\n        },\n        bind: function(fn) {\n            return this.isRightValue ? fn(this.value) : this;\n        },\n        ap: function(eitherWithFn) {\n            var self = this;\n            return this.isRightValue ? eitherWithFn.map(function(fn) {\n                return fn(self.value);\n            }) : this;\n        },\n        leftMap: function(fn) {\n            return this.isLeft() ? Left(fn(this.value)) : this;\n        },\n        isRight: function() {\n            return this.isRightValue;\n        },\n        isLeft: function() {\n            return !this.isRight();\n        },\n        right: function() {\n            if (this.isRightValue) {\n                return this.value;\n            }\n            throw new Error(\"Cannot call right() on a Left.\");\n        },\n        left: function() {\n            if (this.isRightValue) {\n                throw new Error(\"Cannot call left() on a Right.\");\n            }\n            return this.value;\n        },\n        foldLeft: function(initialValue) {\n            return this.toMaybe().toList().foldLeft(initialValue);\n        },\n        foldRight: function(initialValue) {\n            return this.toMaybe().toList().foldRight(initialValue);\n        },\n        cata: function(leftFn, rightFn) {\n            return this.isRightValue ? rightFn(this.value) : leftFn(this.value);\n        },\n        catchMap: function(fn) {\n            return this.isRight() ? this : fn(this.value);\n        },\n        swap: function() {\n            return this.isRight() ? Left(this.value) : Right(this.value);\n        },\n        forEach: function(fn) {\n            this.cata(noop, fn);\n        },\n        forEachLeft: function(fn) {\n            this.cata(fn, noop);\n        },\n        equals: function(other) {\n            return Either.isOfType(other) && this.cata(function(left) {\n                return other.cata(equals(left), falseFunction);\n            }, function(right) {\n                return other.cata(falseFunction, equals(right));\n            });\n        },\n        bimap: function(leftFn, rightFn) {\n            return this.isRightValue ? this.map(rightFn) : this.leftMap(leftFn);\n        },\n        toMaybe: function() {\n            return this.isRight() ? Some(this.value) : None();\n        },\n        toValidation: function() {\n            return this.isRight() ? Success(this.value) : Fail(this.value);\n        },\n        toString: function() {\n            return this.cata(function(left) {\n                return \"Left(\" + left + \")\";\n            }, function(right) {\n                return \"Right(\" + right + \")\";\n            });\n        },\n        toPromise: function() {\n            return this.cata(function(left) {\n                return Promise.reject(left);\n            }, function(right) {\n                return Promise.resolve(right);\n            });\n        },\n        inspect: function() {\n            return this.toString();\n        }\n    };\n    Either.prototype.fold = Either.prototype.cata;\n    Either.fn.init.prototype = Either.fn;\n    setType(Either, TYPES_NAMES.Either);\n    setType(Either.fn.init, TYPES_NAMES.Either);\n    Either.isInstance = isInstance(TYPES_NAMES.Either);\n    Either.isOfType = isOfType(TYPES_NAMES.Either);\n    var Reader = Monet.Reader = function(fn) {\n        return new Reader.fn.init(fn);\n    };\n    Reader.of = function(x) {\n        return Reader(function(_) {\n            return x;\n        });\n    };\n    Reader.ask = function() {\n        return Reader(idFunction);\n    };\n    Reader.fn = Reader.prototype = {\n        init: function(fn) {\n            this.f = fn;\n            setType(this, TYPES_NAMES.Reader);\n        },\n        run: function(config) {\n            return this.f(config);\n        },\n        bind: function(fn) {\n            var self = this;\n            return Reader(function(config) {\n                return fn(self.run(config)).run(config);\n            });\n        },\n        ap: function(readerWithFn) {\n            var self = this;\n            return readerWithFn.bind(function(fn) {\n                return Reader(function(config) {\n                    return fn(self.run(config));\n                });\n            });\n        },\n        map: function(fn) {\n            var self = this;\n            return Reader(function(config) {\n                return fn(self.run(config));\n            });\n        },\n        local: function(fn) {\n            var self = this;\n            return Reader(function(c) {\n                return self.run(fn(c));\n            });\n        }\n    };\n    Reader.fn.init.prototype = Reader.fn;\n    setType(Reader, TYPES_NAMES.Reader);\n    setType(Reader.fn.init, TYPES_NAMES.Reader);\n    Reader.isInstance = isInstance(TYPES_NAMES.Reader);\n    Reader.isOfType = isOfType(TYPES_NAMES.Reader);\n    var Free = Monet.Free = {};\n    var Suspend = Free.Suspend = Monet.Suspend = function(functor) {\n        return new Free.fn.init(functor, true);\n    };\n    var Return = Free.Return = Monet.Return = function(val) {\n        return new Free.fn.init(val, false);\n    };\n    Free.of = function(a) {\n        return Return(a);\n    };\n    Free.liftF = function(functor) {\n        return isFunction(functor) ? Suspend(compose(Return, functor)) : Suspend(functor.map(Return));\n    };\n    Free.fn = Free.prototype = {\n        init: function(val, isSuspend) {\n            this.isSuspend = isSuspend;\n            if (isSuspend) {\n                this.functor = val;\n            } else {\n                this.val = val;\n            }\n            setType(this, TYPES_NAMES.Free);\n        },\n        run: function() {\n            return this.go(function(f) {\n                return f();\n            });\n        },\n        bind: function(fn) {\n            return this.isSuspend ? isFunction(this.functor) ? Suspend(compose(function(free) {\n                return free.bind(fn);\n            }, this.functor)) : Suspend(this.functor.map(function(free) {\n                return free.bind(fn);\n            })) : fn(this.val);\n        },\n        ap: function(ff) {\n            return this.bind(function(x) {\n                return ff.map(function(f) {\n                    return f(x);\n                });\n            });\n        },\n        resume: function() {\n            return this.isSuspend ? Left(this.functor) : Right(this.val);\n        },\n        go1: function(f) {\n            function go2(t) {\n                return t.resume().cata(function(functor) {\n                    return go2(f(functor));\n                }, idFunction);\n            }\n            return go2(this);\n        },\n        go: function(f) {\n            var result = this.resume();\n            while (result.isLeft()) {\n                var next = f(result.left());\n                result = next.resume();\n            }\n            return result.right();\n        }\n    };\n    Free.fn.init.prototype = Free.fn;\n    setType(Free, TYPES_NAMES.Free);\n    setType(Free.fn.init, TYPES_NAMES.Free);\n    Free.isInstance = isInstance(TYPES_NAMES.Free);\n    Free.isOfType = isOfType(TYPES_NAMES.Free);\n    function Identity(a) {\n        return new Identity.fn.init(a);\n    }\n    Monet.Identity = Identity;\n    Identity.of = function(a) {\n        return new Identity(a);\n    };\n    Identity.fn = Identity.prototype = {\n        init: function(val) {\n            this.val = val;\n            setType(this, TYPES_NAMES.Identity);\n        },\n        bind: function(fn) {\n            return fn(this.val);\n        },\n        get: function() {\n            return this.val;\n        },\n        forEach: function(fn) {\n            fn(this.val);\n        },\n        equals: function(other) {\n            return Identity.isOfType(other) && equals(this.get())(other.get());\n        },\n        contains: function(val) {\n            return areEqual(this.val, val);\n        },\n        toString: function() {\n            return \"Identity(\" + this.val + \")\";\n        },\n        inspect: function() {\n            return this.toString();\n        },\n        ap: function(applyWithFunction) {\n            var value = this.val;\n            return applyWithFunction.map(function(fn) {\n                return fn(value);\n            });\n        },\n        toArray: function() {\n            return [ this.get() ];\n        },\n        toList: function() {\n            return List(this.get(), Nil);\n        },\n        toSet: function() {\n            return new Set(this);\n        }\n    };\n    Identity.fn.init.prototype = Identity.fn;\n    setType(Identity, TYPES_NAMES.Identity);\n    setType(Identity.fn.init, TYPES_NAMES.Identity);\n    Identity.isInstance = isInstance(TYPES_NAMES.Identity);\n    Identity.isOfType = isOfType(TYPES_NAMES.Identity);\n    function addFantasyLandAliases(type) {\n        [ \"equals\", \"map\", \"ap\", \"chain\" ].filter(function(method) {\n            return isFunction(type.prototype[method]);\n        }).forEach(function(method) {\n            type.prototype[\"fantasy-land/\" + method] = type.prototype[method];\n        });\n    }\n    function addAliases(type) {\n        type.prototype.flatMap = type.prototype.chain = type.prototype.bind;\n        type.pure = type.unit = type.of;\n        type.prototype.of = type.of;\n        if (isFunction(type.prototype.append)) {\n            type.prototype.concat = type.prototype.append;\n        }\n        type.prototype.point = type.prototype.pure = type.prototype.unit = type.prototype.of;\n    }\n    function addFilterNot(type) {\n        if (isFunction(type.prototype.filter)) {\n            type.prototype.filterNot = function(fn) {\n                return this.filter(function(a) {\n                    return !fn(a);\n                });\n            };\n        }\n    }\n    function addMonadOps(type) {\n        type.prototype.join = function() {\n            return this.flatMap(idFunction);\n        };\n        type.map2 = function(fn) {\n            return function(ma, mb) {\n                return ma.flatMap(function(a) {\n                    return mb.map(function(b) {\n                        return fn(a, b);\n                    });\n                });\n            };\n        };\n    }\n    function addFunctorOps(type) {\n        if (!isFunction(type.prototype.map)) {\n            type.prototype.map = function(fn) {\n                return this.bind(compose(this.of, fn));\n            };\n        }\n    }\n    function addApplicativeOps(type) {\n        type.prototype.takeLeft = function(m) {\n            return apply2(this, m, function(a, b) {\n                return a;\n            });\n        };\n        type.prototype.takeRight = function(m) {\n            return apply2(this, m, function(a, b) {\n                return b;\n            });\n        };\n    }\n    function addCollectionPredicates(type) {\n        if (isFunction(type.prototype.toArray)) {\n            type.prototype.every = type.prototype.forall = function(fn) {\n                return this.toArray().every(fn);\n            };\n            type.prototype.exists = function(fn) {\n                return this.toArray().some(fn);\n            };\n        }\n    }\n    function makeIterable(type) {\n        if (isFunction(type.prototype.toArray)) {\n            type.prototype[Symbol.iterator] = function() {\n                return this.toArray()[Symbol.iterator]();\n            };\n        }\n    }\n    function addToOperator(type) {\n        if (isFunction(type.prototype.toArray)) {\n            type.prototype.to = function(ctor) {\n                return ctor(this);\n            };\n        }\n    }\n    function decorate(type) {\n        addAliases(type);\n        addFilterNot(type);\n        addMonadOps(type);\n        addFunctorOps(type);\n        addApplicativeOps(type);\n        addCollectionPredicates(type);\n        addFantasyLandAliases(type);\n        makeIterable(type);\n        addToOperator(type);\n    }\n    decorate(MonadT);\n    decorate(Either);\n    decorate(Maybe);\n    decorate(IO);\n    decorate(NEL);\n    decorate(List);\n    decorate(Validation);\n    decorate(Reader);\n    decorate(Free);\n    decorate(Identity);\n    return Monet;\n});\n\n//# sourceURL=webpack:///./node_modules/monet/dist/monet.js?");

/***/ }),

/***/ "./src/Index.ts":
/*!**********************!*\
  !*** ./src/Index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VideoSiteHandler_1 = __webpack_require__(/*! ./handlers/VideoSiteHandler */ \"./src/handlers/VideoSiteHandler.ts\");\nvar monet_1 = __webpack_require__(/*! monet */ \"./node_modules/monet/dist/monet.js\");\nwindow.onload = function () {\n    var url = window.location.href;\n    monet_1.Maybe.fromNull(VideoSiteHandler_1.videoSiteHandlers.find(function (videoSiteHandler) { return url.startsWith(\"https://\" + videoSiteHandler.videoSite.toLowerCase()); }))\n        .forEach(function (videoSiteHandler) {\n        if (videoSiteHandler.isVideoPage(document)) {\n            var downloadButton_1 = VideoSiteHandler_1.createButton(document);\n            videoSiteHandler.buttonContainer(document).forEach(function (container) { return container.appendChild(downloadButton_1); });\n            VideoSiteHandler_1.addButtonFunctionality(downloadButton_1, url);\n        }\n    });\n};\n\n\n//# sourceURL=webpack:///./src/Index.ts?");

/***/ }),

/***/ "./src/handlers/PornOneVideoSiteHandler.ts":
/*!*************************************************!*\
  !*** ./src/handlers/PornOneVideoSiteHandler.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PornOneVideoSiteHandler = void 0;\nvar VideoSite_1 = __webpack_require__(/*! ../models/VideoSite */ \"./src/models/VideoSite.ts\");\nvar monet_1 = __webpack_require__(/*! monet */ \"./node_modules/monet/dist/monet.js\");\nvar PornOneVideoSiteHandler = /** @class */ (function () {\n    function PornOneVideoSiteHandler() {\n        this.videoSite = VideoSite_1.VideoSite.PornOne;\n    }\n    PornOneVideoSiteHandler.prototype.buttonContainer = function (document) {\n        return this.videoPlayer(document);\n    };\n    PornOneVideoSiteHandler.prototype.isVideoPage = function (document) {\n        return this.videoPlayer(document).isJust();\n    };\n    PornOneVideoSiteHandler.prototype.videoPlayer = function (document) {\n        return monet_1.Maybe.fromNull(document.getElementById(\"video_player\"));\n    };\n    return PornOneVideoSiteHandler;\n}());\nexports.PornOneVideoSiteHandler = PornOneVideoSiteHandler;\nexports.default = new PornOneVideoSiteHandler();\n\n\n//# sourceURL=webpack:///./src/handlers/PornOneVideoSiteHandler.ts?");

/***/ }),

/***/ "./src/handlers/VideoSiteHandler.ts":
/*!******************************************!*\
  !*** ./src/handlers/VideoSiteHandler.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addButtonFunctionality = exports.createButton = exports.videoSiteHandlers = void 0;\nvar VideoDownloaderApi_1 = __webpack_require__(/*! ../services/VideoDownloaderApi */ \"./src/services/VideoDownloaderApi.ts\");\nvar PornOneVideoSiteHandler_1 = __importDefault(__webpack_require__(/*! ./PornOneVideoSiteHandler */ \"./src/handlers/PornOneVideoSiteHandler.ts\"));\nexports.videoSiteHandlers = [PornOneVideoSiteHandler_1.default];\nexports.createButton = function (document) {\n    var downloadButton = document.createElement(\"button\");\n    downloadButton.id = \"download-video-button\";\n    downloadButton.textContent = \"Checking\";\n    return downloadButton;\n};\nexports.addButtonFunctionality = function (downloadButton, url) {\n    return VideoDownloaderApi_1.videoExists(url)\n        .then(function (exists) {\n        if (exists) {\n            downloadButton.textContent = \"Already scheduled\";\n            downloadButton.disabled = true;\n            return;\n        }\n        else {\n            downloadButton.textContent = \"Download\";\n            downloadButton.onclick = function () {\n                downloadButton.disabled = true;\n                return VideoDownloaderApi_1.scheduleVideo(url).then(function () { return exports.addButtonFunctionality(downloadButton, url); });\n            };\n        }\n    });\n};\n\n\n//# sourceURL=webpack:///./src/handlers/VideoSiteHandler.ts?");

/***/ }),

/***/ "./src/models/VideoSite.ts":
/*!*********************************!*\
  !*** ./src/models/VideoSite.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VideoSite = void 0;\nvar monet_1 = __webpack_require__(/*! monet */ \"./node_modules/monet/dist/monet.js\");\nvar VideoSite;\n(function (VideoSite) {\n    VideoSite[\"PornOne\"] = \"PornOne\";\n    VideoSite[\"SpankBang\"] = \"SpankBang\";\n})(VideoSite = exports.VideoSite || (exports.VideoSite = {}));\nvar inferVideoSite = function (url) {\n    return monet_1.Maybe.fromNull(Object.values(VideoSite).find(function (videoSite) { return url.startsWith(\"https://\" + videoSite.toLowerCase()); }));\n};\n\n\n//# sourceURL=webpack:///./src/models/VideoSite.ts?");

/***/ }),

/***/ "./src/services/VideoDownloaderApi.ts":
/*!********************************************!*\
  !*** ./src/services/VideoDownloaderApi.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scheduleVideo = exports.videoExists = void 0;\n// const VIDEO_DOWNLOADER_API_URL = \"https://webhook.site/53bc3b04-0bb1-4716-baef-43dc45c32463\"\nvar VIDEO_DOWNLOADER_API_URL = \"http://localhost:8000\";\nexports.videoExists = function (url) {\n    return fetch(VIDEO_DOWNLOADER_API_URL + \"/schedule/search?video-url=\" + url)\n        .then(function (response) { return response.json(); })\n        .then(function (body) { return body.results.length > 0; });\n};\nexports.scheduleVideo = function (url) {\n    return fetch(VIDEO_DOWNLOADER_API_URL + \"/schedule\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ url: url })\n    })\n        .then(function (response) { return response.ok; });\n};\n\n\n//# sourceURL=webpack:///./src/services/VideoDownloaderApi.ts?");

/***/ })

/******/ });